{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git의-모든-것---06/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"bc948fef-cd97-5bec-a6f6-abbc40d42d9e","excerpt":"git alias 명렁을 전부 입력해서 사용하기 귀찮을 때 사용하는게 다 이제 다음과 같이 동작한다 한결 명령어를 사용하기 편해졌다 git을 설치하면 가 함께 설치되는데 기본적으로 되어있는 단축어를 볼 수 있다 내 경우에는 를 사용하지 않고 을 직접 수정하여 단축어를 관리하고 있다 📌 의 위치는 Git…","html":"<h1 id=\"git-alias\" style=\"position:relative;\"><a href=\"#git-alias\" aria-label=\"git alias permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git alias</h1>\n<p>명렁을 전부 입력해서 사용하기 귀찮을 때 사용하는게 <code class=\"language-text\">alias</code>다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status</code></pre></div>\n<p>이제 다음과 같이 동작한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git co test\n\n# 실제 동작하는 코드\n$ git checkout test</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git st\n\n# 실제 동작하는 코드\n$ git status</code></pre></div>\n<p>한결 명령어를 사용하기 편해졌다</p>\n<p>git을 설치하면 <code class=\"language-text\">git bash</code>가 함께 설치되는데 기본적으로 되어있는 단축어를 볼 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ alias</code></pre></div>\n<p>내 경우에는 <code class=\"language-text\">$ git config</code>를 사용하지 않고 <code class=\"language-text\">alias.sh</code>을 직접 수정하여 단축어를 관리하고 있다</p>\n<blockquote>\n<p>📌 <code class=\"language-text\">alias.sh</code>의 위치는 Git 디렉토리를 살펴보면 된다<br />\n(내 경우에는 <code class=\"language-text\">c/Program Files/Git/etc/profile.d/aliases.sh</code>에 있었다)</p>\n</blockquote>\n<p>이를 수정하기 편하기 위해서 나는 아래와 같은 단축어를 추가하였다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># 📁c/Program Files/Git/etc/profile.d/aliases.sh\n\nalias mod_alias=&quot;code /c/&#39;Program Files&#39;/Git/etc/profile.d/aliases.sh&quot;</code></pre></div>\n<p>위와 같이 단축어를 추가하고 싶다면 <code class=\"language-text\">alias ${단축어}=\"${실제 명령}\"</code>으로 추가하면 된다</p>\n<h1 id=\"브랜치\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98\" aria-label=\"브랜치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치</h1>\n<p>개발을 하다 보면 코드를 여러 개로 복사해야 하는 일이 자주 생긴다</p>\n<p>코드를 통째로 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있는데, 이렇게 독립적으로 개발하는 것이 <strong>브랜치</strong>다</p>\n<h2 id=\"브랜치란-무엇인가\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"브랜치란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치란 무엇인가</h2>\n<p>git이 브랜치를 다루는 과정을 이해하기 위해 git이 데이터를 어떻게 저장하는지에 대해 알아보도록 하자</p>\n<p>git은 데이터의 변경사항(diff)을 기록하지 않고 일련의 스냅샷으로 기록한다</p>\n<p>커밋하면 git은 현 staging area에 있는 데이터의 스냅샷에 대한 포인터, 저자나 커밋 메세지 같은 메타데이터, 이전 커밋에 대한 포인터 등을 포함하는 commit object를 저장한다</p>\n<p>파일이 3개 있는 디렉토리가 하나 있고 이 파일을 staging area에 저장하고 커밋하는 예제를 살펴보자<br />\n(디렉토리의 구조는 아래와 같다)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">📁example directory\n  ├ README\n  ├ test.rb\n  └ LICENSE</code></pre></div>\n<p>파일을 staged하면 git 저장소에 파일을 저장하고(이를 git에서는 <code class=\"language-text\">Blob</code>이라고 부른다) staging area에 해당 파일의 체크섬을 저장한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git add .\n$ git commit -m &#39;The initial commit of my project&#39;</code></pre></div>\n<p><code class=\"language-text\">$ git commit</code>으로 커밋하면 먼저 루트 디렉토리와 각 하위 디렉토리의 트리 객체를 체크섬과 함께 저장소에 저장한다</p>\n<p>그 다음에 커밋 객체를 만들고 메타데이터와 루트 디렉토리 트리 객체를 가리키는 포인터 정보를 커밋 객체에 넣어 저장한다<br />\n(그래서 스냅샷을 언제든지 필요할 때 다시 만들 수 있는 것이다)</p>\n<p>이 작업을 마치고 나면 git에는 5개의 데이터 객체가 생긴다</p>\n<ol>\n<li>각 파일에 대한 Blob 3개(README, test.rb, LICENSE)</li>\n<li>파일과 디렉토리 구조가 들어있는 트리 객체</li>\n<li>메타데이터와 루트 트리를 가리키는 포인터가 담긴 커밋 객체</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_02.png\" alt=\"commit, tree data\"></p>\n<p>다시 수정하고 커밋을 하면 아래와 같이 이전 커밋을 parent에 저장한다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_03.png\" alt=\"commit, before commit\"></p>\n<p><code class=\"language-text\">$ git init</code>읋 하면 자동적으로 master 브랜치를 만드는데 이름이 master라고 해서 추가되는 브랜치들과 다른점은 없다</p>\n<p>처음 커밋을 하게되면 이 master 브랜치가 생성된 커밋을 가리키고 이후에는 최종커밋(가장 최근에 한 커밋)을 자동으로 가리킨다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_04.png\" alt=\"branch, commit history\"></p>\n<h2 id=\"새-브랜치-생성하기\" style=\"position:relative;\"><a href=\"#%EC%83%88-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"새 브랜치 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새 브랜치 생성하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git branch testing</code></pre></div>\n<p>이제 <code class=\"language-text\">testing</code>이라는 이름의 브랜치가 하나 생성됐다</p>\n<p>이 브랜치도 지금 작업하고 있던 마지막 커밋을 가리키고 있다</p>\n<p>git은 지금 작업중인 브랜치를 어떻게 파악할 수 있는걸까?</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log</code></pre></div>\n<p>커밋한 이력을 보면 항상 <code class=\"language-text\">HEAD</code>라는게 보인다</p>\n<p>이 <code class=\"language-text\">HEAD</code>라는 특수한 포인터는 지금 작업하는 로컬브랜치를 가리킨다</p>\n<h2 id=\"브랜치-이동하기\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"브랜치 이동하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치 이동하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout testing</code></pre></div>\n<p>이제 testing 브랜치로 이동이 되었고 <code class=\"language-text\">HEAD</code> 포인터 또한 testing을 가리킨다</p>\n<p>이제 여기서 새로 커밋을 하게 되면 다음과 같아진다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_05.png\" alt=\"HEAD가 가리키는 testing 브랜치가 새 커밋을 가리킴\"></p>\n<p>다시 master로 돌아오면 <code class=\"language-text\">HEAD</code>는 아래와 같이 이동하게 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout master</code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_06.png\" alt=\"HEAD가 Checkout 한 브랜치로 이동함\"></p>\n<p>워킹디렉토리의 파일도 <code class=\"language-text\">f30ab</code> 커밋 시점으로 돌아갔다</p>\n<p>이렇게 브랜치 작업을 하다 시각적으로 확인하고 싶다면 아래의 명령을 실행해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes | * 87ab2 (testing) made a change\n|/\n* f30ab add feature #32 - ability to add new formats to the\n* 34ac2 fixed bug #1328 - stack overflow under certain conditions * 98ca9 initial commit of my project</code></pre></div>\n<blockquote>\n<p>📌 <code class=\"language-text\">$ git checkout -b ${브랜치 명}</code>을 통해 브랜치의 생성과 이동을 한번에 할 수 있다</p>\n</blockquote>\n<h2 id=\"merge의-기초\" style=\"position:relative;\"><a href=\"#merge%EC%9D%98-%EA%B8%B0%EC%B4%88\" aria-label=\"merge의 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merge의 기초</h2>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_06.png\" alt=\"master와 별개로 진행하는 iss53 브랜치\"></p>\n<p>브랜치와 커밋상황이 위와 같을 때 iss53 브랜치를 master 브랜치에 합치고 싶다면 머지 명령을 하면된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout master\nSwitched to branch &#39;master&#39;\n\n$ git merge iss53\nMerge made by the &#39;recursive&#39; strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)</code></pre></div>\n<p>이때 git은 3-way merge를 한다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_07.png\" alt=\"커밋 3개를 Merge\"></p>\n<p>이는 단순히 브랜치 포인터를 최신 커밋으로 옮기는 것이 아니라 3-way merge의 결과를 별도의 커밋으로 만든다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_07.png\" alt=\"Merge 커밋\"></p>\n<h2 id=\"충돌의-기초\" style=\"position:relative;\"><a href=\"#%EC%B6%A9%EB%8F%8C%EC%9D%98-%EA%B8%B0%EC%B4%88\" aria-label=\"충돌의 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>충돌의 기초</h2>\n<p>머지가 순조롭게 되지 않을 때도 있는데 이를 충돌(comflict)이라고 한다</p>\n<p>충돌되는 이유는 일반적으로 머지하는 두 브랜치에서 같은 파일의 한 부분을 동시에 수정하고 머지하려고 하기 때문이다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre></div>\n<p>git이 자동으로 머지를 하지 못해 새 커밋도 생기지 못했다</p>\n<p>이렇게 충돌이 발생했을 때 어떤 파일을 머지할 수 없었는지는 <code class=\"language-text\">$ git status</code>로 확인할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run &quot;git commit&quot;)\n\nUnmerged paths:\n  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)\n\n     both modified:      index.html\n\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre></div>\n<p>충돌이 일어난 파일은 <strong>unmerged</strong>에 표시되고 충돌된 부분은 아래와 같이 표시된다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=\"footer\">contact : email.support@github.com&lt;/div> =======\n&lt;div id=\"footer\">\n please contact us at support@github.com &lt;/div>\n>>>>>>> iss53:index.html</code></pre></div>\n<p>=======위쪽의 내용은 HEAD 버전(위의 예시에서는 master)의 내용이고 아래쪽이 iss53버전임을 알 수 있다</p>\n<p>충돌을 해결하려면 위쪽과 아래쪽 중 하나를 선택하거나 새로 작성하여 머지를 해줘야 한다</p>","frontmatter":{"title":"git의 모든 것 - 6","date":"May 10, 2022"}}},"pageContext":{"slug":"/git/git의-모든-것---06/","previous":{"fields":{"slug":"/books/네-개의-서명(셜록홈즈-전집-2권)/"},"frontmatter":{"title":"네 개의 서명(셜록홈즈 전집 2권)"}},"next":{"fields":{"slug":"/git/git의-모든-것---05/"},"frontmatter":{"title":"git의 모든 것 - 5"}}}}}